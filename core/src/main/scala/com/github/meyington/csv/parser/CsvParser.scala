package com.github.meyington.csv.parser

import zio.*

/** Иерархия ошибок при работе с CSV файлами.
  *
  * Этот тип представляет все возможные ошибки, которые могут возникнуть
  * при чтении, парсинге и валидации CSV данных.
  */
sealed trait CsvError
object CsvError {
  /** Ошибка при разборе структуры CSV.
    *
    * Возникает при нарушении формата CSV, например:
    *   - Незакрытые кавычки
    *   - Неправильное экранирование
    *   - Несоответствие количества колонок
    *
    * @param message детальное описание проблемы
    */
  case class ParseError(message: String) extends CsvError

  /** Ошибка при проверке данных.
    *
    * Возникает при нарушении бизнес-правил, например:
    *   - Неверный формат даты
    *   - Число вне допустимого диапазона
    *   - Отсутствие обязательного значения
    *
    * @param message описание нарушенного правила валидации
    */
  case class ValidationError(message: String) extends CsvError

  /** Ошибка при операциях ввода-вывода.
    *
    * Возникает при проблемах с файловой системой:
    *   - Файл не найден
    *   - Нет прав доступа
    *   - Проблемы с кодировкой
    *
    * @param message описание проблемы с I/O
    */
  case class IOError(message: String) extends CsvError
}

/** Структурированное представление строки CSV.
  *
  * Пример использования:
  * {{{
  * val row = CsvRow(Vector("John", "Doe", "30"))
  * val name = row.values(0) // "John"
  * }}}
  *
  * @param values список значений в строке
  */
case class CsvRow(values: Vector[String])

/** Настройки для конфигурации парсера CSV.
  *
  * Позволяет настроить основные параметры разбора CSV:
  *   - Символ-разделитель полей
  *   - Символ для обрамления значений
  *   - Символ экранирования специальных символов
  */
trait CsvConfig {
  /** Символ для разделения полей в CSV (обычно запятая) */
  def delimiter: Char
  /** Символ для обрамления значений, содержащих разделитель */
  def quoteChar: Char
  /** Символ для экранирования специальных символов в значениях */
  def escapeChar: Char
}

/** Основной интерфейс для работы с CSV файлами.
  *
  * Этот интерфейс предоставляет основные операции для парсинга CSV данных
  * с поддержкой обработки ошибок через ZIO и настраиваемой конфигурацией.
  *
  * Пример использования:
  * {{{
  * val parser: CsvParser = ???
  * val result = for {
  *   row <- parser.parseLine("John,Doe,30")
  *   rows <- parser.parseLines(Seq("header1,header2", "value1,value2"))
  * } yield rows
  * }}}
  */
trait CsvParser {
  /** Разбирает одну строку CSV в структурированное представление.
    *
    * Метод учитывает настройки парсера (разделитель, кавычки, экранирование)
    * и возвращает результат в виде ZIO эффекта.
    *
    * @param line входная строка для парсинга
    * @return успешный результат парсинга или ошибку
    */
  def parseLine(line: String): IO[CsvError, CsvRow]

  /** Разбирает последовательность строк CSV.
    *
    * Обработка прерывается при первой встреченной ошибке.
    * Все строки обрабатываются с одинаковыми настройками парсера.
    *
    * @param lines список входных строк
    * @return список успешно разобранных строк или первую ошибку
    */
  def parseLines(lines: Seq[String]): IO[CsvError, Vector[CsvRow]]
}

object CsvParser {
  /** Стандартная конфигурация для наиболее распространенного формата CSV.
    *
    * Использует общепринятые настройки:
    *   - Запятая как разделитель
    *   - Двойные кавычки для обрамления
    *   - Обратный слеш для экранирования
    */
  object DefaultConfig extends CsvConfig {
    val delimiter: Char = ','
    val quoteChar: Char = '"'
    val escapeChar: Char = '\\'
  }
} 